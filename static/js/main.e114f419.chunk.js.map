{"version":3,"sources":["components/emoji/DisplayEmoji.tsx","components/emoji-table/EmojiCard.tsx","components/emoji-table/FullscreenEmoji.tsx","components/emoji-table/EmojiTable.tsx","util/emoji/emoji-list.const.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["DisplayEmoji","emoji","props","src","alt","loading","EmojiCard","onClick","className","id","FullscreenEmoji","onClose","EmojiTable","emojies","useState","fullscreenEmoji","setFullscreenEmoji","onDialogClose","useCallback","map","key","baseUrl","emojiList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e114f419.chunk.js","sourcesContent":["import React from 'react';\nimport { Emoji } from '../../util/emoji/emoji.type';\n\ntype DisplayEmojiProps = {\n  emoji: Emoji;\n  [x: string]: any;\n};\n\nexport function DisplayEmoji({ emoji, ...props }: DisplayEmojiProps) {\n  return <img {...props} src={emoji.src} alt=\"\" loading=\"lazy\" />;\n}\n","import React from 'react';\nimport { Emoji } from '../../util/emoji/emoji.type';\nimport { DisplayEmoji } from '../emoji/DisplayEmoji';\n\ntype EmojiCardProps = {\n  emoji: Emoji;\n  onClick: (e: Emoji) => void;\n};\n\nexport function EmojiCard({ emoji, onClick }: EmojiCardProps) {\n  return (\n    <div className=\"pb-100% relative\">\n      <button\n        className=\"flex flex-col items-center shadow rounded p-2 bg-white absolute top-0 w-full h-full focus:outline-none hover:bg-orange-300 focus:bg-orange-300 transition duration-300\"\n        onClick={() => {\n          onClick(emoji);\n        }}>\n        <DisplayEmoji emoji={emoji} className=\"pb-8 h-full\" />\n        <span className=\"font-semibold text-gray-600 text-sm absolute bottom-2\">\n          {emoji.id}\n        </span>\n      </button>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Emoji } from '../../util/emoji/emoji.type';\nimport { DisplayEmoji } from '../emoji/DisplayEmoji';\n\ntype FullscreenEmojiProps = {\n  emoji: Emoji;\n  onClose: VoidFunction;\n};\n\nexport function FullscreenEmoji({ emoji, onClose }: FullscreenEmojiProps) {\n  return (\n    <div\n      className=\"fixed top-0 left-0 w-screen h-screen bg-white z-50 flex items-center justify-center\"\n      onClick={onClose}>\n      <DisplayEmoji\n        emoji={emoji}\n        className=\"w-96 h-96 max-h-vmin max-w-vmin object-contain p-8\"\n      />\n    </div>\n  );\n}\n","import React, { useCallback, useState } from 'react';\nimport { Emoji } from '../../util/emoji/emoji.type';\nimport { EmojiCard } from './EmojiCard';\nimport { FullscreenEmoji } from './FullscreenEmoji';\n\ntype EmojiTableProps = {\n  emojies: Emoji[];\n};\n\nexport function EmojiTable({ emojies }: EmojiTableProps) {\n  const [fullscreenEmoji, setFullscreenEmoji] = useState<Emoji | null>(null);\n\n  const onDialogClose = useCallback(() => {\n    setFullscreenEmoji(null);\n  }, [setFullscreenEmoji]);\n\n  return (\n    <>\n      <div className=\"grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-6 gap-2 md:gap-4\">\n        {emojies.map((emoji) => (\n          <EmojiCard\n            key={emoji.id}\n            emoji={emoji}\n            onClick={setFullscreenEmoji}\n          />\n        ))}\n      </div>\n      {fullscreenEmoji && (\n        <FullscreenEmoji emoji={fullscreenEmoji} onClose={onDialogClose} />\n      )}\n    </>\n  );\n}\n","import { Emoji } from './emoji.type';\n\nconst baseUrl =\n  'https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/apple/237/';\n\nexport const emojiList: Emoji[] = [\n  {\n    id: 'smily_smile',\n    src: baseUrl + 'smiling-face-with-smiling-eyes_1f60a.png',\n  },\n  {\n    id: 'smily_frown',\n    src: baseUrl + 'white-frowning-face_2639.png',\n  },\n  {\n    id: 'smily_angry',\n    src: baseUrl + 'pouting-face_1f621.png',\n  },\n  {\n    id: 'smily_shocked',\n    src: baseUrl + 'face-screaming-in-fear_1f631.png',\n  },\n  {\n    id: 'smily_hearts',\n    src: baseUrl + 'smiling-face-with-heart-shaped-eyes_1f60d.png',\n  },\n  {\n    id: 'smily_raised',\n    src: baseUrl + 'face-with-one-eyebrow-raised_1f928.png',\n  },\n  {\n    id: 'smily_shush',\n    src: baseUrl + 'face-with-finger-covering-closed-lips_1f92b.png',\n  },\n  {\n    id: 'smily_sleep',\n    src: baseUrl + 'sleeping-face_1f634.png',\n  },\n  {\n    id: 'smily_party',\n    src: baseUrl + 'face-with-party-horn-and-party-hat_1f973.png',\n  },\n  {\n    id: 'waving',\n    src: baseUrl + 'waving-hand-sign_1f44b.png',\n  },\n  {\n    id: 'thumbs_up',\n    src: baseUrl + 'thumbs-up-sign_1f44d.png',\n  },\n  {\n    id: 'thumbs_down',\n    src: baseUrl + 'thumbs-down-sign_1f44e.png',\n  },\n  {\n    id: 'ok',\n    src: baseUrl + 'ok-hand-sign_1f44c.png',\n  },\n  {\n    id: 'fingers_crossed',\n    src: baseUrl + 'hand-with-index-and-middle-fingers-crossed_1f91e.png',\n  },\n  {\n    id: 'raised_hand_man',\n    src: baseUrl + 'man-raising-hand-type-1-2_1f64b-1f3fb-200d-2642-fe0f.png',\n  },\n  {\n    id: 'raised_hand_woman',\n    src: baseUrl + 'woman-raising-hand-type-1-2_1f64b-1f3fb-200d-2640-fe0f.png',\n  },\n  {\n    id: 'cake',\n    src: baseUrl + 'shortcake_1f370.png',\n  },\n  {\n    id: 'lit',\n    src: baseUrl + 'fire_1f525.png',\n  },\n  {\n    id: 'hourglass',\n    src: baseUrl + 'hourglass_231b.png',\n  },\n  {\n    id: 'party',\n    src: baseUrl + 'party-popper_1f389.png',\n  },\n  {\n    id: 'magic',\n    src: baseUrl + 'crystal-ball_1f52e.png',\n  },\n  { id: 'telephone', src: baseUrl + 'telephone-receiver_1f4de.png' },\n  { id: 'microphone', src: baseUrl + 'microphone_1f3a4.png' },\n  {\n    id: 'walking_woman',\n    src: baseUrl + 'woman-walking-type-1-2_1f6b6-1f3fb-200d-2640-fe0f.png',\n  },\n  {\n    id: 'walking_man',\n    src: baseUrl + 'man-walking-type-1-2_1f6b6-1f3fb-200d-2642-fe0f.png',\n  },\n  { id: 'joker', src: baseUrl + 'playing-card-black-joker_1f0cf.png' },\n  { id: 'wtf', src: baseUrl + 'exclamation-question-mark_2049.png' },\n];\n","import React from 'react';\nimport './assets/main.css';\nimport { EmojiTable } from './components/emoji-table/EmojiTable';\nimport { emojiList } from './util/emoji/emoji-list.const';\n\nfunction App() {\n  return (\n    <div className=\"max-w-screen-lg mx-auto p-4\">\n      <EmojiTable emojies={emojiList} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}